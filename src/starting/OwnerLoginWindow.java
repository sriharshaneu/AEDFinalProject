/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package starting;

import customerPackage.Customer;
import customerPackage.MusicBandModel;
import customerPackage.Waitor;
import khakejaorestaurant.MyConnection;
import khakejaorestaurant.User;
import java.awt.Dialog;
import java.math.BigInteger;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import managerPackage.Manager;
import managerPackage.ManagerWelcomeForm;

/**
 *
 * @author sreyasborra
 */
public class OwnerLoginWindow extends javax.swing.JFrame {

	/**
	 * Creates new form Owner
	 */
	public OwnerLoginWindow() {
		initComponents();

	}

	OwnerLoginWindow(Owner owner) {
		initComponents();
		txtPassword.setText("");
		refreshOwnerMgrTable();
		refreshOwnerChefTable();
		refreshWaiterTable();
		refreshBandMemberTable();
	}

	private String getEncryptedHash(char[] password) {
		String passwordHash = "";

		for (char c : password) {
			passwordHash += c;
		}

		return User.encryptThisString(passwordHash);

	}

	/**
	 * This method is called from within the constructor to initialize the
	 * form. WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
        // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
        private void initComponents() {

                buttonGroup1 = new javax.swing.ButtonGroup();
                pnl_background = new javax.swing.JPanel();
                pHeader = new javax.swing.JPanel();
                btnLogout = new javax.swing.JButton();
                lbLogo = new javax.swing.JLabel();
                jLabel11 = new javax.swing.JLabel();
                jPanel1 = new javax.swing.JPanel();
                tabEquipment = new javax.swing.JTabbedPane();
                jPanel2 = new javax.swing.JPanel();
                jScrollPane1 = new javax.swing.JScrollPane();
                tblManagerList = new javax.swing.JTable();
                btnAddMgr = new javax.swing.JButton();
                btnRemoveMgr = new javax.swing.JButton();
                jPanel3 = new javax.swing.JPanel();
                jScrollPane2 = new javax.swing.JScrollPane();
                tblChefList = new javax.swing.JTable();
                btnAddChef = new javax.swing.JButton();
                btnRemoveChef = new javax.swing.JButton();
                jPanel4 = new javax.swing.JPanel();
                jScrollPane3 = new javax.swing.JScrollPane();
                tblWaiter = new javax.swing.JTable();
                btnAddWaiter = new javax.swing.JButton();
                btnRemoveWaiter = new javax.swing.JButton();
                jPanel5 = new javax.swing.JPanel();
                jScrollPane5 = new javax.swing.JScrollPane();
                jTable5 = new javax.swing.JTable();
                jLabel9 = new javax.swing.JLabel();
                jLabel10 = new javax.swing.JLabel();
                jPanel6 = new javax.swing.JPanel();
                jScrollPane4 = new javax.swing.JScrollPane();
                tblMusicBand = new javax.swing.JTable();
                btnAddBandPerson = new javax.swing.JButton();
                btnRemoveBandPerson = new javax.swing.JButton();
                jPanel8 = new javax.swing.JPanel();
                jPanel10 = new javax.swing.JPanel();
                jScrollPane7 = new javax.swing.JScrollPane();
                areaEquipment = new javax.swing.JTextArea();
                dropdownEquip = new javax.swing.JComboBox<>();
                lblEquipment = new javax.swing.JLabel();
                btnEmailEquipment = new javax.swing.JButton();
                jPanel9 = new javax.swing.JPanel();
                lblGroceries = new javax.swing.JLabel();
                jScrollPane8 = new javax.swing.JScrollPane();
                areaGrocerries = new javax.swing.JTextArea();
                dropdownGroc = new javax.swing.JComboBox<>();
                btnEmailGrocerries = new javax.swing.JButton();
                jPanel7 = new javax.swing.JPanel();
                lblName = new javax.swing.JLabel();
                txtRoleName = new javax.swing.JTextField();
                jLabel2 = new javax.swing.JLabel();
                txtRolePhone = new javax.swing.JTextField();
                lblUsername = new javax.swing.JLabel();
                txtRoleUsername = new javax.swing.JTextField();
                txtPassword = new javax.swing.JPasswordField();
                lblPassword = new javax.swing.JLabel();

                setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

                pnl_background.setPreferredSize(new java.awt.Dimension(1216, 711));
                pnl_background.setLayout(null);

                pHeader.setBackground(new java.awt.Color(255, 213, 0));
                pHeader.setName("pHeader"); // NOI18N
                pHeader.setPreferredSize(new java.awt.Dimension(1062, 70));
                pHeader.setLayout(null);

                btnLogout.setBackground(new java.awt.Color(255, 213, 0));
                btnLogout.setFont(new java.awt.Font("Rockwell", 0, 24)); // NOI18N
                btnLogout.setForeground(new java.awt.Color(127, 72, 101));
                btnLogout.setText("Log out");
                btnLogout.setToolTipText("");
                btnLogout.setBorder(null);
                btnLogout.setBorderPainted(false);
                btnLogout.setContentAreaFilled(false);
                btnLogout.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
                btnLogout.setName(""); // NOI18N
                btnLogout.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                btnLogoutActionPerformed(evt);
                        }
                });
                pHeader.add(btnLogout);
                btnLogout.setBounds(1020, 30, 101, 40);

                lbLogo.setBackground(new java.awt.Color(255, 255, 255));
                lbLogo.setFont(new java.awt.Font("Rockwell Condensed", 0, 52)); // NOI18N
                lbLogo.setForeground(new java.awt.Color(127, 72, 101));
                lbLogo.setText("Khake Jao");
                lbLogo.setToolTipText("");
                pHeader.add(lbLogo);
                lbLogo.setBounds(30, 10, 270, 62);

                jLabel11.setFont(new java.awt.Font("Rockwell", 1, 24)); // NOI18N
                jLabel11.setText("Owner");
                pHeader.add(jLabel11);
                jLabel11.setBounds(540, 20, 210, 40);

                pnl_background.add(pHeader);
                pHeader.setBounds(0, 0, 1220, 80);

                tblManagerList.setModel(new javax.swing.table.DefaultTableModel(
                        new Object [][] {
                                {null, null, null},
                                {null, null, null},
                                {null, null, null},
                                {null, null, null}
                        },
                        new String [] {
                                "Ref", "Username", "Phone"
                        }
                ));
                jScrollPane1.setViewportView(tblManagerList);

                btnAddMgr.setText("Add Manager");
                btnAddMgr.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                btnAddMgrActionPerformed(evt);
                        }
                });

                btnRemoveMgr.setText("Remove Manager");
                btnRemoveMgr.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                btnRemoveMgrActionPerformed(evt);
                        }
                });

                javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
                jPanel2.setLayout(jPanel2Layout);
                jPanel2Layout.setHorizontalGroup(
                        jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                .addGap(45, 45, 45)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 37, Short.MAX_VALUE)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(btnRemoveMgr, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(btnAddMgr, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(197, 197, 197))
                );
                jPanel2Layout.setVerticalGroup(
                        jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(38, 38, 38)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(jPanel2Layout.createSequentialGroup()
                                                .addComponent(btnAddMgr)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(btnRemoveMgr))
                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addContainerGap(326, Short.MAX_VALUE))
                );

                tabEquipment.addTab("Manager", jPanel2);

                tblChefList.setModel(new javax.swing.table.DefaultTableModel(
                        new Object [][] {
                                {null, null, null},
                                {null, null, null},
                                {null, null, null},
                                {null, null, null}
                        },
                        new String [] {
                                "Ref", "Username", "Phone"
                        }
                ));
                jScrollPane2.setViewportView(tblChefList);

                btnAddChef.setText("Add Chef");
                btnAddChef.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                btnAddChefActionPerformed(evt);
                        }
                });

                btnRemoveChef.setText("Remove Chef");
                btnRemoveChef.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                btnRemoveChefActionPerformed(evt);
                        }
                });

                javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
                jPanel3.setLayout(jPanel3Layout);
                jPanel3Layout.setHorizontalGroup(
                        jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(55, 55, 55)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 23, Short.MAX_VALUE)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(btnRemoveChef, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(btnAddChef, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(225, 225, 225))
                );
                jPanel3Layout.setVerticalGroup(
                        jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(60, 60, 60)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(jPanel3Layout.createSequentialGroup()
                                                .addComponent(btnAddChef)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(btnRemoveChef))
                                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addContainerGap(304, Short.MAX_VALUE))
                );

                tabEquipment.addTab("Chef", jPanel3);

                tblWaiter.setModel(new javax.swing.table.DefaultTableModel(
                        new Object [][] {
                                {null, null, null},
                                {null, null, null},
                                {null, null, null},
                                {null, null, null}
                        },
                        new String [] {
                                "Ref", "Username", "Phone"
                        }
                ));
                jScrollPane3.setViewportView(tblWaiter);

                btnAddWaiter.setText("Add Waiter");
                btnAddWaiter.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                btnAddWaiterActionPerformed(evt);
                        }
                });

                btnRemoveWaiter.setText("Remove Waiter");
                btnRemoveWaiter.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                btnRemoveWaiterActionPerformed(evt);
                        }
                });

                javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
                jPanel4.setLayout(jPanel4Layout);
                jPanel4Layout.setHorizontalGroup(
                        jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel4Layout.createSequentialGroup()
                                .addGap(105, 105, 105)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(26, 26, 26)
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(btnRemoveWaiter, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(btnAddWaiter, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addContainerGap(160, Short.MAX_VALUE))
                );
                jPanel4Layout.setVerticalGroup(
                        jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel4Layout.createSequentialGroup()
                                .addGap(60, 60, 60)
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(jPanel4Layout.createSequentialGroup()
                                                .addComponent(btnAddWaiter)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(btnRemoveWaiter))
                                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addContainerGap(304, Short.MAX_VALUE))
                );

                tabEquipment.addTab("Waiter", jPanel4);

                jTable5.setModel(new javax.swing.table.DefaultTableModel(
                        new Object [][] {
                                {null, null, null, null},
                                {null, null, null, null},
                                {null, null, null, null},
                                {null, null, null, null}
                        },
                        new String [] {
                                "Title 1", "Title 2", "Title 3", "Title 4"
                        }
                ));
                jScrollPane5.setViewportView(jTable5);

                jLabel9.setText("Add ");

                jLabel10.setText("Remove ");

                javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
                jPanel5.setLayout(jPanel5Layout);
                jPanel5Layout.setHorizontalGroup(
                        jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel5Layout.createSequentialGroup()
                                .addGap(92, 92, 92)
                                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(93, 93, 93)
                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel9)
                                        .addComponent(jLabel10))
                                .addContainerGap(156, Short.MAX_VALUE))
                );
                jPanel5Layout.setVerticalGroup(
                        jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel5Layout.createSequentialGroup()
                                .addGap(53, 53, 53)
                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(jPanel5Layout.createSequentialGroup()
                                                .addComponent(jLabel9)
                                                .addGap(26, 26, 26)
                                                .addComponent(jLabel10)))
                                .addContainerGap(295, Short.MAX_VALUE))
                );

                tabEquipment.addTab("Delivery Boy", jPanel5);

                tblMusicBand.setModel(new javax.swing.table.DefaultTableModel(
                        new Object [][] {
                                {null, null, null},
                                {null, null, null},
                                {null, null, null},
                                {null, null, null}
                        },
                        new String [] {
                                "ref", "Name", "Phone Number"
                        }
                ));
                jScrollPane4.setViewportView(tblMusicBand);

                btnAddBandPerson.setText("Add Band Person");
                btnAddBandPerson.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                btnAddBandPersonActionPerformed(evt);
                        }
                });

                btnRemoveBandPerson.setText("Remove Band Person");
                btnRemoveBandPerson.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                btnRemoveBandPersonActionPerformed(evt);
                        }
                });

                javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
                jPanel6.setLayout(jPanel6Layout);
                jPanel6Layout.setHorizontalGroup(
                        jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel6Layout.createSequentialGroup()
                                .addGap(105, 105, 105)
                                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(37, 37, 37)
                                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(btnAddBandPerson, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(btnRemoveBandPerson, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addContainerGap(117, Short.MAX_VALUE))
                );
                jPanel6Layout.setVerticalGroup(
                        jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel6Layout.createSequentialGroup()
                                .addGap(56, 56, 56)
                                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(jPanel6Layout.createSequentialGroup()
                                                .addComponent(btnAddBandPerson)
                                                .addGap(18, 18, 18)
                                                .addComponent(btnRemoveBandPerson))
                                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addContainerGap(308, Short.MAX_VALUE))
                );

                tabEquipment.addTab("Music Band", jPanel6);

                areaEquipment.setColumns(20);
                areaEquipment.setRows(5);
                jScrollPane7.setViewportView(areaEquipment);

                dropdownEquip.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Walmart", "Costco", "BestBuy", "Target" }));
                dropdownEquip.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                dropdownEquipActionPerformed(evt);
                        }
                });

                lblEquipment.setText("Enter your requirements here:");

                btnEmailEquipment.setText("SendEmail");
                btnEmailEquipment.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                btnEmailEquipmentActionPerformed(evt);
                        }
                });

                javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
                jPanel10.setLayout(jPanel10Layout);
                jPanel10Layout.setHorizontalGroup(
                        jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel10Layout.createSequentialGroup()
                                .addGap(85, 85, 85)
                                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(lblEquipment, javax.swing.GroupLayout.PREFERRED_SIZE, 253, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                .addGroup(jPanel10Layout.createSequentialGroup()
                                                        .addComponent(dropdownEquip, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addComponent(btnEmailEquipment))
                                                .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 510, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addContainerGap(251, Short.MAX_VALUE))
                );
                jPanel10Layout.setVerticalGroup(
                        jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel10Layout.createSequentialGroup()
                                .addGap(39, 39, 39)
                                .addComponent(lblEquipment)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(32, 32, 32)
                                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(dropdownEquip, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(btnEmailEquipment))
                                .addContainerGap(152, Short.MAX_VALUE))
                );

                javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
                jPanel8.setLayout(jPanel8Layout);
                jPanel8Layout.setHorizontalGroup(
                        jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel8Layout.createSequentialGroup()
                                .addGap(0, 9, Short.MAX_VALUE)
                                .addComponent(jPanel10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 9, Short.MAX_VALUE))
                );
                jPanel8Layout.setVerticalGroup(
                        jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel8Layout.createSequentialGroup()
                                .addGap(0, 13, Short.MAX_VALUE)
                                .addComponent(jPanel10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 14, Short.MAX_VALUE))
                );

                tabEquipment.addTab("Equipment", jPanel8);

                lblGroceries.setText("Enter your requirements here:");

                areaGrocerries.setColumns(20);
                areaGrocerries.setRows(5);
                jScrollPane8.setViewportView(areaGrocerries);

                dropdownGroc.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Market-Basket", "Indian-Mart", "Traders-Joe", " " }));
                dropdownGroc.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                dropdownGrocActionPerformed(evt);
                        }
                });

                btnEmailGrocerries.setText("Send Email");
                btnEmailGrocerries.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                btnEmailGrocerriesActionPerformed(evt);
                        }
                });

                javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
                jPanel9.setLayout(jPanel9Layout);
                jPanel9Layout.setHorizontalGroup(
                        jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel9Layout.createSequentialGroup()
                                .addGap(103, 103, 103)
                                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(lblGroceries, javax.swing.GroupLayout.PREFERRED_SIZE, 253, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                .addGroup(jPanel9Layout.createSequentialGroup()
                                                        .addComponent(dropdownGroc, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addComponent(btnEmailGrocerries))
                                                .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 510, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addContainerGap(251, Short.MAX_VALUE))
                );
                jPanel9Layout.setVerticalGroup(
                        jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel9Layout.createSequentialGroup()
                                .addGap(67, 67, 67)
                                .addComponent(lblGroceries)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(dropdownGroc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(btnEmailGrocerries))
                                .addContainerGap(165, Short.MAX_VALUE))
                );

                tabEquipment.addTab("Groceires", jPanel9);

                lblName.setText("Name");

                txtRoleName.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                txtRoleNameActionPerformed(evt);
                        }
                });

                jLabel2.setText("Phone");

                txtRolePhone.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                txtRolePhoneActionPerformed(evt);
                        }
                });

                lblUsername.setText("Username");

                txtPassword.setText("jPasswordField1");
                txtPassword.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                txtPasswordActionPerformed(evt);
                        }
                });

                lblPassword.setText("Password");

                javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
                jPanel7.setLayout(jPanel7Layout);
                jPanel7Layout.setHorizontalGroup(
                        jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel7Layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                .addComponent(lblName)
                                                .addComponent(jLabel2)
                                                .addComponent(lblUsername)
                                                .addComponent(txtRoleName)
                                                .addComponent(txtRolePhone)
                                                .addComponent(txtRoleUsername)
                                                .addComponent(txtPassword, javax.swing.GroupLayout.DEFAULT_SIZE, 217, Short.MAX_VALUE))
                                        .addComponent(lblPassword))
                                .addContainerGap(27, Short.MAX_VALUE))
                );
                jPanel7Layout.setVerticalGroup(
                        jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel7Layout.createSequentialGroup()
                                .addGap(49, 49, 49)
                                .addComponent(lblName)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtRoleName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtRolePhone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(lblUsername)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtRoleUsername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(lblPassword)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(76, Short.MAX_VALUE))
                );

                javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
                jPanel1.setLayout(jPanel1Layout);
                jPanel1Layout.setHorizontalGroup(
                        jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(tabEquipment, javax.swing.GroupLayout.PREFERRED_SIZE, 869, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(26, Short.MAX_VALUE))
                );
                jPanel1Layout.setVerticalGroup(
                        jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addContainerGap()
                                                .addComponent(tabEquipment, javax.swing.GroupLayout.PREFERRED_SIZE, 539, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addGap(39, 39, 39)
                                                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                );

                pnl_background.add(jPanel1);
                jPanel1.setBounds(0, 80, 1170, 480);

                javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
                getContentPane().setLayout(layout);
                layout.setHorizontalGroup(
                        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addComponent(pnl_background, javax.swing.GroupLayout.PREFERRED_SIZE, 1168, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                );
                layout.setVerticalGroup(
                        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(pnl_background, javax.swing.GroupLayout.DEFAULT_SIZE, 740, Short.MAX_VALUE)
                );

                pack();
        }// </editor-fold>//GEN-END:initComponents
	private List<Manager> loadAllMgrs() {

		List<Manager> managersList = new ArrayList<>();

		PreparedStatement ps;
		ResultSet rs;
		String query = "SELECT * FROM manager;";
		try {
			ps = MyConnection.getConnection().prepareStatement(query);
			rs = ps.executeQuery();
			while (rs.next()) {
				String Name = rs.getString("manager_name");
				String Phone = rs.getString("manager_mobile");
				String Username = rs.getString("manager_username");
				Manager mgr = new Manager();
				mgr.setUsername(Username);

				mgr.setMobilePhone(Phone);

				managersList.add(mgr);

			}
			return managersList;

		} catch (SQLException ex) {
			Logger.getLogger(Customer.class.getName()).log(Level.SEVERE, null, ex);
		}
		return null;
	}

	private List<Chef> loadAllChef() {

		List<Chef> chefList = new ArrayList<>();

		PreparedStatement ps;
		ResultSet rs;
		String query = "SELECT * FROM chef;";
		try {
			ps = MyConnection.getConnection().prepareStatement(query);
			rs = ps.executeQuery();
			while (rs.next()) {
				String Id = rs.getString("chef_id");
				String Username = rs.getString("username");
				String Phone = rs.getString("mobile_phone");
				Chef chef = new Chef();
				chef.setUsername(Username);

				chef.setMobilePhone(Phone);

				chefList.add(chef);

			}
			return chefList;

		} catch (SQLException ex) {
			Logger.getLogger(Customer.class.getName()).log(Level.SEVERE, null, ex);
		}
		return null;
	}

	private List<Waitor> loadAllWaiters() {

		List<Waitor> wList = new ArrayList<>();

		PreparedStatement ps;
		ResultSet rs;
		String query = "SELECT * FROM waitors;";
		try {
			ps = MyConnection.getConnection().prepareStatement(query);
			rs = ps.executeQuery();
			while (rs.next()) {

				String Username = rs.getString("username");
				String Phone = rs.getString("waitor_contact");
				Waitor waiter = new Waitor();
				waiter.setWusername(Username);

				waiter.setWphone(Phone);

				wList.add(waiter);

			}
			return wList;

		} catch (SQLException ex) {
			Logger.getLogger(Customer.class.getName()).log(Level.SEVERE, null, ex);
		}
		return null;
	}

	private void refreshWaiterTable() {

		DefaultTableModel model = (DefaultTableModel) tblWaiter.getModel();
		model.setRowCount(0);

		List<Waitor> wList = loadAllWaiters();

		if (wList == null) {
			JOptionPane.showMessageDialog(null, "No Records Found", null, JOptionPane.ERROR_MESSAGE);
		} else {
			for (Waitor waiter : wList) {
				Object[] row = new Object[3];

				row[0] = waiter;
				row[1] = waiter.getWusername();
				row[2] = waiter.getWphone();

				model.addRow(row);
			}
		}

	}

	private void refreshOwnerMgrTable() {

		DefaultTableModel model = (DefaultTableModel) tblManagerList.getModel();
		model.setRowCount(0);

		List<Manager> managersList = loadAllMgrs();

		if (managersList == null) {
			JOptionPane.showMessageDialog(null, "No Records Found", null, JOptionPane.ERROR_MESSAGE);
		} else {
			for (Manager manager : managersList) {
				Object[] row = new Object[3];

				row[0] = manager;
				row[1] = manager.getUsername();
				row[2] = manager.getMobilePhone();

				model.addRow(row);
			}
		}

	}

	private void refreshOwnerChefTable() {

		DefaultTableModel model = (DefaultTableModel) tblChefList.getModel();
		model.setRowCount(0);

		List<Chef> chefList = loadAllChef();

		if (chefList == null) {
			JOptionPane.showMessageDialog(null, "No Records Found", null, JOptionPane.ERROR_MESSAGE);
		} else {
			for (Chef chef : chefList) {
				Object[] row = new Object[3];

				row[0] = chef;
				row[1] = chef.getUsername();
				row[2] = chef.getMobilePhone();

				model.addRow(row);
			}
		}

	}

	public boolean deletedMgrRecord(String username) {

		//write code here
		final String QUERY = "DELETE FROM manager WHERE manager_username = (?);";
		PreparedStatement ps;
		ResultSet rs;

		try {
			ps = MyConnection.getConnection().prepareStatement(QUERY);
			ps.setString(1, username);
			int updated = ps.executeUpdate();

			return updated > 0;

		} catch (SQLException ex) {
			Logger.getLogger(Customer.class.getName()).log(Level.SEVERE, null, ex);
		}

		return false;
	}

	public boolean deletedWaiterRecord(String username) {

		//write code here
		final String QUERY = "DELETE FROM waitors WHERE username = (?);";
		PreparedStatement ps;
		ResultSet rs;

		try {
			ps = MyConnection.getConnection().prepareStatement(QUERY);
			ps.setString(1, username);
			int updated = ps.executeUpdate();

			return updated > 0;

		} catch (SQLException ex) {
			Logger.getLogger(Customer.class.getName()).log(Level.SEVERE, null, ex);
		}

		return false;
	}

	public boolean deletedChefRecord(String username) {

		//write code here
		final String QUERY = "DELETE FROM chef WHERE username = (?);";
		PreparedStatement ps;
		ResultSet rs;

		try {
			ps = MyConnection.getConnection().prepareStatement(QUERY);
			ps.setString(1, username);
			int updated = ps.executeUpdate();

			return updated > 0;

		} catch (SQLException ex) {
			Logger.getLogger(Customer.class.getName()).log(Level.SEVERE, null, ex);
		}

		return false;
	}

	private void refreshBandMemberTable() {

		DefaultTableModel model = (DefaultTableModel) tblMusicBand.getModel();
		model.setRowCount(0);

		List<MusicBandModel> mbList = loadAllMusicBandMembers();

		if (mbList == null) {
			JOptionPane.showMessageDialog(null, "No Records Found", null, JOptionPane.ERROR_MESSAGE);
		} else {
			for (MusicBandModel waiter : mbList) {
				Object[] row = new Object[3];

				row[0] = waiter;
				row[1] = waiter.getUsername();
				row[2] = waiter.getPhoneNumber();

				model.addRow(row);
			}
		}

	}

	private List<MusicBandModel> loadAllMusicBandMembers() {

		List<MusicBandModel> mbList = new ArrayList<>();

		PreparedStatement ps;
		ResultSet rs;
		String query = "SELECT * FROM music_band;";
		try {
			ps = MyConnection.getConnection().prepareStatement(query);
			rs = ps.executeQuery();
			while (rs.next()) {

				String Username = rs.getString("username");
				String Phone = rs.getString("phone_number");
				MusicBandModel mb = new MusicBandModel();
				mb.setUsername(Username);

				mb.setPhoneNumber(Phone);

				mbList.add(mb);

			}
			return mbList;

		} catch (SQLException ex) {
			Logger.getLogger(Customer.class.getName()).log(Level.SEVERE, null, ex);
		}
		return null;
	}

    private void btnLogoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLogoutActionPerformed
	    HomepageForm homepage = new HomepageForm(true);
	    homepage.setVisible(true);
	    this.dispose();
    }//GEN-LAST:event_btnLogoutActionPerformed

        private void btnAddMgrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddMgrActionPerformed

		String validationText = validation(txtRoleUsername.getText(), String.valueOf(txtPassword.getPassword()), txtRoleName.getText(), txtRolePhone.getText());

		if (validationText.equalsIgnoreCase("success")) {
			PreparedStatement ps;
			ResultSet rs;
			String query = "SELECT * FROM manager WHERE manager_username =?";
			try {
				ps = MyConnection.getConnection().prepareStatement(query);
				ps.setString(1, txtRoleName.getText());
				rs = ps.executeQuery();
				if (rs.next()) {
					JOptionPane.showMessageDialog(null, "This Username Already Exists");
					RoleSignUpForm.setTextField();
				} else {
					query = "INSERT INTO `manager`(`manager_username`, `manager_mobile`, `manager_password`, `manager_name`) VALUES (?,?,?,?)";
					ps = MyConnection.getConnection().prepareStatement(query);

					String encrypted = getEncryptedHash(txtPassword.getPassword());
					//String encryptedPassword = txtPassword.getPassword() + encrypted;
					ps.setString(1, txtRoleUsername.getText());
					ps.setString(2, txtRolePhone.getText());
					ps.setString(3, encrypted);
					ps.setString(4, txtRoleName.getText());

					if (ps.executeUpdate() > 0) {
						//JOptionPane.showMessageDialog(null, "New User Add");
						JOptionPane.showMessageDialog(this, "Registered manager successfully.");
						ResetRoleFields();
						refreshOwnerMgrTable();
					}
				}
			} catch (SQLException ex) {
				ex.printStackTrace();
				Logger.getLogger(Manager.class.getName()).log(Level.SEVERE, null, ex);
			}

		} else {
			JOptionPane.showMessageDialog(this, validationText);
		}

		// TODO add your handling code here:
        }//GEN-LAST:event_btnAddMgrActionPerformed

        private void txtRoleNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtRoleNameActionPerformed
		// TODO add your handling code here:
        }//GEN-LAST:event_txtRoleNameActionPerformed

        private void txtRolePhoneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtRolePhoneActionPerformed
		// TODO add your handling code here:
        }//GEN-LAST:event_txtRolePhoneActionPerformed

        private void txtPasswordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPasswordActionPerformed
		// TODO add your handling code here:

//boolean registered = false;

        }//GEN-LAST:event_txtPasswordActionPerformed

        private void btnRemoveMgrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveMgrActionPerformed
		try {
			int clickedRowIndex = tblManagerList.getSelectedRow();
			if (clickedRowIndex == -1) {
				throw new Exception("Please select a row to delete");
			}
			DefaultTableModel model = (DefaultTableModel) tblManagerList.getModel();
			Manager selectedRow = (Manager) model.getValueAt(clickedRowIndex, 0);
			boolean deleted = deletedMgrRecord(selectedRow.getUsername());
			System.out.println(deleted);
			refreshOwnerMgrTable();
		} catch (Exception e) {
			JOptionPane.showMessageDialog(this, e.getMessage());
		}

        }//GEN-LAST:event_btnRemoveMgrActionPerformed

        private void btnAddChefActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddChefActionPerformed
		String validationText = validation(txtRoleUsername.getText(), String.valueOf(txtPassword.getPassword()), txtRoleName.getText(), txtRolePhone.getText());

		if (validationText.equalsIgnoreCase("success")) {
			PreparedStatement ps;
			ResultSet rs;
			String query = "SELECT * FROM chef WHERE username =?";
			try {
				ps = MyConnection.getConnection().prepareStatement(query);
				ps.setString(1, txtRoleName.getText());
				rs = ps.executeQuery();
				if (rs.next()) {
					JOptionPane.showMessageDialog(null, "This Username Already Exists");
					RoleSignUpForm.setTextField();
				} else {
					query = "INSERT INTO `chef`( `username`, `password`, `mobile_phone`) VALUES (?,?,?)";
					ps = MyConnection.getConnection().prepareStatement(query);

					String encrypted = getEncryptedHash(txtPassword.getPassword());
					//String encryptedPassword = txtPassword.getPassword() + encrypted;
					ps.setString(1, txtRoleUsername.getText());
					ps.setString(2, encrypted);
					ps.setString(3, txtRolePhone.getText());

					if (ps.executeUpdate() > 0) {
						//JOptionPane.showMessageDialog(null, "New User Add");
						JOptionPane.showMessageDialog(this, "Registered chef successfully.");
						ResetRoleFields();
						refreshOwnerChefTable();
					}
				}
			} catch (SQLException ex) {
				ex.printStackTrace();
				Logger.getLogger(Manager.class.getName()).log(Level.SEVERE, null, ex);
			}

		} else {
			JOptionPane.showMessageDialog(this, validationText);
		}
        }//GEN-LAST:event_btnAddChefActionPerformed

        private void btnRemoveChefActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveChefActionPerformed
		try {
			int clickedRowIndex = tblChefList.getSelectedRow();
			if (clickedRowIndex == -1) {
				throw new Exception("Please select a row to delete");
			}
			DefaultTableModel model = (DefaultTableModel) tblChefList.getModel();
			Chef selectedRow = (Chef) model.getValueAt(clickedRowIndex, 0);
			boolean deleted = deletedChefRecord(selectedRow.getUsername());
			System.out.println(deleted);
			refreshOwnerChefTable();
		} catch (Exception e) {
			JOptionPane.showMessageDialog(this, e.getMessage());
		}
        }//GEN-LAST:event_btnRemoveChefActionPerformed

        private void btnAddWaiterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddWaiterActionPerformed
		String validationText = validation(txtRoleUsername.getText(), String.valueOf(txtPassword.getPassword()), txtRoleName.getText(), txtRolePhone.getText());

		String encrypted = getEncryptedHash(txtPassword.getPassword());

		if (validationText.equalsIgnoreCase("success")) {
			PreparedStatement ps;
			ResultSet rs;
			String query = "SELECT * FROM waitors WHERE username =?";
			String updateQuery = "INSERT INTO `waitors`(waitor_name, username, password,waitor_contact) VALUES (?,?,?,?)";
			try {
				ps = MyConnection.getConnection().prepareStatement(query);
				ps.setString(1, txtRoleUsername.getText());

				rs = ps.executeQuery();
				if (rs.next()) {
					JOptionPane.showMessageDialog(null, "This Username Already Exists");
					RoleSignUpForm.setTextField();
				} else {

					ps = MyConnection.getConnection().prepareStatement(updateQuery);
					ps.setString(1, txtRoleName.getText());
					ps.setString(2, txtRoleUsername.getText());
					ps.setString(3, encrypted);
					ps.setString(4, txtRolePhone.getText());

					//String encryptedPassword = txtPassword.getPassword() + encrypted;
					if (ps.executeUpdate() > 0) {
						//JOptionPane.showMessageDialog(null, "New User Add");
						JOptionPane.showMessageDialog(this, "Registered waiter successfully.");
						ResetRoleFields();
						refreshWaiterTable();
					}
				}
			} catch (SQLException ex) {
				ex.printStackTrace();
				Logger.getLogger(Manager.class.getName()).log(Level.SEVERE, null, ex);
			}

		} else {
			JOptionPane.showMessageDialog(this, validationText);
		}
        }//GEN-LAST:event_btnAddWaiterActionPerformed

        private void btnRemoveWaiterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveWaiterActionPerformed
		try {
			int clickedRowIndex = tblWaiter.getSelectedRow();
			if (clickedRowIndex == -1) {
				throw new Exception("Please select a row to delete");
			}
			DefaultTableModel model = (DefaultTableModel) tblWaiter.getModel();
			Waitor selectedRow = (Waitor) model.getValueAt(clickedRowIndex, 0);
			boolean deleted = deletedWaiterRecord(selectedRow.getWusername());
			System.out.println(deleted);
			refreshWaiterTable();
		} catch (Exception e) {
			JOptionPane.showMessageDialog(this, e.getMessage());
		}
        }//GEN-LAST:event_btnRemoveWaiterActionPerformed

        private void btnAddBandPersonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddBandPersonActionPerformed
		// TODO add your handling code here:

		String validationText = validation(txtRoleUsername.getText(), String.valueOf(txtPassword.getPassword()), txtRoleName.getText(), txtRolePhone.getText());

		if (validationText.equalsIgnoreCase("success")) {
			PreparedStatement ps;
			ResultSet rs;
			String query = "SELECT * FROM music_band WHERE username =?";
			try {
				ps = MyConnection.getConnection().prepareStatement(query);
				ps.setString(1, txtRoleName.getText());
				rs = ps.executeQuery();
				if (rs.next()) {
					JOptionPane.showMessageDialog(null, "This Username Already Exists");
					RoleSignUpForm.setTextField();
				} else {
					query = "INSERT INTO `music_band`(`username`, `password`, `band_name`, `phone_number`) VALUES (?,?,?,?)";
					ps = MyConnection.getConnection().prepareStatement(query);

					String encrypted = getEncryptedHash(txtPassword.getPassword());
					//String encryptedPassword = txtPassword.getPassword() + encrypted;
					ps.setString(1, txtRoleUsername.getText());
					ps.setString(2, encrypted);
					ps.setString(3, txtRoleUsername.getText());
					ps.setString(4, txtRolePhone.getText());

					if (ps.executeUpdate() > 0) {
						//JOptionPane.showMessageDialog(null, "New User Add");
						JOptionPane.showMessageDialog(this, "Registered band member successfully.");
						ResetRoleFields();
						refreshBandMemberTable();
					}
				}
			} catch (SQLException ex) {
				ex.printStackTrace();
				Logger.getLogger(Manager.class.getName()).log(Level.SEVERE, null, ex);
			}

		} else {
			JOptionPane.showMessageDialog(this, validationText);
		}

        }//GEN-LAST:event_btnAddBandPersonActionPerformed

        private void btnRemoveBandPersonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveBandPersonActionPerformed
		// TODO add your handling code here:

		try {
			int clickedRowIndex = tblMusicBand.getSelectedRow();
			if (clickedRowIndex == -1) {
				throw new Exception("Please select a row to delete");
			}
			DefaultTableModel model = (DefaultTableModel) tblMusicBand.getModel();
			MusicBandModel selectedRow = (MusicBandModel) model.getValueAt(clickedRowIndex, 0);
			boolean deleted = deletedBandMemberRecord(selectedRow.getUsername());
			System.out.println(deleted);
			refreshBandMemberTable();
		} catch (Exception e) {
			JOptionPane.showMessageDialog(this, e.getMessage());
		}
        }//GEN-LAST:event_btnRemoveBandPersonActionPerformed

        private void btnEmailEquipmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEmailEquipmentActionPerformed
		// TODO add your handling code here:
		mailservice.MailService.senMail("sriharshaperi@gmail.com", areaEquipment.getText(), dropdownEquip.getSelectedItem().toString());
        }//GEN-LAST:event_btnEmailEquipmentActionPerformed

        private void dropdownEquipActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dropdownEquipActionPerformed
		// TODO add your handling code here:
        }//GEN-LAST:event_dropdownEquipActionPerformed

        private void dropdownGrocActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dropdownGrocActionPerformed
		// TODO add your handling code here:
        }//GEN-LAST:event_dropdownGrocActionPerformed

        private void btnEmailGrocerriesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEmailGrocerriesActionPerformed
		// TODO add your handling code here:
		mailservice.MailService.senMail("sriharshaperi@gmail.com", areaGrocerries.getText(), dropdownGroc.getSelectedItem().toString());
        }//GEN-LAST:event_btnEmailGrocerriesActionPerformed

	public boolean deletedBandMemberRecord(String username) {

		//write code here
		final String QUERY = "DELETE FROM music_band WHERE username = (?);";
		PreparedStatement ps;
		ResultSet rs;

		try {
			ps = MyConnection.getConnection().prepareStatement(QUERY);
			ps.setString(1, username);
			int updated = ps.executeUpdate();

			return updated > 0;

		} catch (SQLException ex) {
			Logger.getLogger(Customer.class.getName()).log(Level.SEVERE, null, ex);
		}

		return false;
	}

	public String validation(String username, String password, String name, String phoneNumber) {
		if (username.trim().isEmpty() || password.trim().isEmpty() || name.trim().isEmpty() || phoneNumber.trim().isEmpty()) {
			return "Missing Mandatory Fields";
		} else if (phoneNumber.length() < 11) {
			return "Contact number must be of 11 digits";

		}

		return "Success";
	}

	public static String encryptThisString(String input) {
		try {
			// getInstance() method is called with algorithm SHA-1 
			MessageDigest md = MessageDigest.getInstance("SHA-1");
			byte[] messageDigest = md.digest(input.getBytes());

			// Convert byte array into signum representation 
			BigInteger no = new BigInteger(1, messageDigest);

			// Convert message digest into hex value 
			String hashtext = no.toString(16);

			// Add preceding 0s to make it 32 bit 
			while (hashtext.length() < 32) {
				hashtext = "0" + hashtext;
			}

			// return the HashText 
			return hashtext;
		} catch (NoSuchAlgorithmException e) {
			JOptionPane.showMessageDialog(null, e.getMessage());

		}
		return null;
	}

	public void ResetRoleFields() {
		txtPassword.setText("");
		txtRoleName.setText("");
		txtRolePhone.setText("");
		txtRoleUsername.setText("");
	}

	/**
	 * @param args the command line arguments
	 */
	public static void main(String args[]) {
		/* Set the Nimbus look and feel */
		//<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
		/* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
		 */
		try {
			for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
				if ("Nimbus".equals(info.getName())) {
					javax.swing.UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		} catch (ClassNotFoundException ex) {
			java.util.logging.Logger.getLogger(OwnerLoginWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (InstantiationException ex) {
			java.util.logging.Logger.getLogger(OwnerLoginWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (IllegalAccessException ex) {
			java.util.logging.Logger.getLogger(OwnerLoginWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (javax.swing.UnsupportedLookAndFeelException ex) {
			java.util.logging.Logger.getLogger(OwnerLoginWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		}
		//</editor-fold>
		//</editor-fold>
		//</editor-fold>
		//</editor-fold>

		/* Create and display the form */
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				new OwnerLoginWindow().setVisible(true);
			}
		});
	}

        // Variables declaration - do not modify//GEN-BEGIN:variables
        private javax.swing.JTextArea areaEquipment;
        private javax.swing.JTextArea areaGrocerries;
        private javax.swing.JButton btnAddBandPerson;
        private javax.swing.JButton btnAddChef;
        private javax.swing.JButton btnAddMgr;
        private javax.swing.JButton btnAddWaiter;
        private javax.swing.JButton btnEmailEquipment;
        private javax.swing.JButton btnEmailGrocerries;
        private javax.swing.JButton btnLogout;
        private javax.swing.JButton btnRemoveBandPerson;
        private javax.swing.JButton btnRemoveChef;
        private javax.swing.JButton btnRemoveMgr;
        private javax.swing.JButton btnRemoveWaiter;
        private javax.swing.ButtonGroup buttonGroup1;
        private javax.swing.JComboBox<String> dropdownEquip;
        private javax.swing.JComboBox<String> dropdownGroc;
        private javax.swing.JLabel jLabel10;
        private javax.swing.JLabel jLabel11;
        private javax.swing.JLabel jLabel2;
        private javax.swing.JLabel jLabel9;
        private javax.swing.JPanel jPanel1;
        private javax.swing.JPanel jPanel10;
        private javax.swing.JPanel jPanel2;
        private javax.swing.JPanel jPanel3;
        private javax.swing.JPanel jPanel4;
        private javax.swing.JPanel jPanel5;
        private javax.swing.JPanel jPanel6;
        private javax.swing.JPanel jPanel7;
        private javax.swing.JPanel jPanel8;
        private javax.swing.JPanel jPanel9;
        private javax.swing.JScrollPane jScrollPane1;
        private javax.swing.JScrollPane jScrollPane2;
        private javax.swing.JScrollPane jScrollPane3;
        private javax.swing.JScrollPane jScrollPane4;
        private javax.swing.JScrollPane jScrollPane5;
        private javax.swing.JScrollPane jScrollPane7;
        private javax.swing.JScrollPane jScrollPane8;
        private javax.swing.JTable jTable5;
        private javax.swing.JLabel lbLogo;
        private javax.swing.JLabel lblEquipment;
        private javax.swing.JLabel lblGroceries;
        private javax.swing.JLabel lblName;
        private javax.swing.JLabel lblPassword;
        private javax.swing.JLabel lblUsername;
        public static javax.swing.JPanel pHeader;
        private javax.swing.JPanel pnl_background;
        private javax.swing.JTabbedPane tabEquipment;
        private javax.swing.JTable tblChefList;
        private javax.swing.JTable tblManagerList;
        private javax.swing.JTable tblMusicBand;
        private javax.swing.JTable tblWaiter;
        private javax.swing.JPasswordField txtPassword;
        private javax.swing.JTextField txtRoleName;
        private javax.swing.JTextField txtRolePhone;
        private javax.swing.JTextField txtRoleUsername;
        // End of variables declaration//GEN-END:variables
}
