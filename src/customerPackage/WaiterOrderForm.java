/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package customerPackage;

import customerPackage.BillForm;
import static customerPackage.BillForm.delivered;
import customerPackage.Customer;
import customerPackage.DeliveryBoy;
import customerPackage.Order;
import static customerPackage.OrderForm.currentOrder;
//import static customerPackage.OrderForm.deliveryBoy;
import static customerPackage.OrderForm.orderPrice;
import static customerPackage.OrderForm.voucher;
import customerPackage.Voucher;
import java.util.Date;
import java.util.HashMap;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.JSpinner;
import menuItems.Inventory;
import menuItems.MainMenu;
import starting.HomepageForm;
import starting.HomepageForm;

/**
 *
 * @author sreyasborra
 */
public class WaiterOrderForm extends javax.swing.JFrame {

	/**
	 * Creates new form Waiter
	 */
	BillForm bill;
	static Order currentOrder;
	static int quantity;
	String category;
	static HashMap<String, Integer> orderPrice;
	MainMenu mainMenu = new MainMenu();
	boolean isCategory;
	Inventory inventory = new Inventory();
	static Waitor waitor = new Waitor();
	static DeliveryBoy deliveryBoy;
	static Voucher voucher = new Voucher();
	long ONE_MINUTE_IN_MILLIS = 60000;
	long orderStartMillis;
	Date afterAddingTenMins;
	boolean notFirstVisit = false;
	String menuIds;
	boolean pressedOffers = false;
	private String orderType;

	public WaiterOrderForm() {
		currentOrder = new Order();
		initComponents();
		mainMenu.setCategoryItem();
		inventory.setInventoryItems();
		//initializeComp();
	}

	public WaiterOrderForm(Waitor waitor, String Ids, String orderType) {
		initComponents();
		this.waitor = waitor;
		this.menuIds = Ids;
		String iiid = String.valueOf(waitor.getId());
		boolean isLastDelivered = checkLastOrders(waitor);
		this.orderType = orderType;
		if (isLastDelivered) {
			currentOrder = new Order(String.valueOf(Order.getNoOrders() + 1), String.valueOf(waitor.getId()), waitor.getName(), waitor.getAddress(), waitor.getMobilePhone());
		} else {
			currentOrder = waitor.getOrders().get(waitor.getOrders().size() - 1);
			notFirstVisit = true;
		}
		if (waitor.getOrders().size() > 0) {
			waitor.setTempOrder(waitor.getOrders().get(waitor.getOrders().size() - 1));
			//System.out.println(customer.getTempOrder().getId()+" "+customer.getTempOrder().getStatus()+" in comstructor order Form");
		}
		//System.out.println(String.valueOf(customer.getId()));

		//initializeComp();
	}

	private boolean checkLastOrders(Waitor w) {
		Order tempOrder = new Order();
		if (w.getOrders().size() > 0) {
			tempOrder = w.getOrders().get(w.getOrders().size() - 1);
//            if(tempOrder.checkStatus(tempOrder))
//            {
//                return true;
//            }
			if (tempOrder.getStatus()) {
				return true;
			} else {
				return false;
			}

		} else {
			return true;
		}

	}

	/*private void initializeComp() {
		this.setLocationRelativeTo(null); //center form in screen
		this.orderPrice = new HashMap<>();
		deliveryBoy = new DeliveryBoy();
		deliveryBoy.setDeliveryBoys();
		voucher.setVouchers();
		((JSpinner.DefaultEditor) spin_quantity.getEditor()).getTextField().setEditable(false); //to make spinner non editable
		cbx_choose_order.setModel(new DefaultComboBoxModel<>(new String[]{
			""
		})); //clear combo box in the first open
		cbx_choose_order.setSelectedIndex(-1);
		cbx_promoCode.setSelectedIndex(-1);
		fillVoucher();
		cbx_promoCode.setSelectedIndex(-1);
	}*/

	public void fillVoucher() {
		Voucher.voucherList.keySet().forEach((voucherId)
			-> {
		//	cbx_promoCode.addItem(voucherId);
		});

	}

	public void offer(String voucherId) {
		int precentage;
		precentage = voucher.getPercentage(voucherId);

		//if the voucher is valid set the voucher obj info
		if (precentage != 0) {
			voucher.setId(voucherId);
			voucher.setPercentage(precentage);
			voucher.setReleaseDate(Voucher.voucherList.get(voucherId).getReleaseDate());
			voucher.setExpirationDate(Voucher.voucherList.get(voucherId).getExpirationDate());

		}
	}

	/**
	 * This method is called from within the constructor to initialize the
	 * form. WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
        // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
        private void initComponents() {

                setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

                javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
                getContentPane().setLayout(layout);
                layout.setHorizontalGroup(
                        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 1238, Short.MAX_VALUE)
                );
                layout.setVerticalGroup(
                        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 814, Short.MAX_VALUE)
                );

                pack();
        }// </editor-fold>//GEN-END:initComponents

	/*public void fillComboBox(String categoryName) {
		//cbx_choose_order.setModel(new DefaultComboBoxModel<>(new String[]{
			""
		}));
		isCategory = false;
		MainMenu.categoryList.keySet().forEach((category)
			-> {
			if (category.equals(categoryName)) {
				isCategory = true;
			}
			for (int i = 0; i < MainMenu.categoryList.get(category).size(); ++i) {
				String itemName = MainMenu.categoryList.get(category).get(i).getItemName();
				int price = MainMenu.categoryList.get(category).get(i).getItemPrice();
				if (isCategory) {
					cbx_choose_order.addItem(itemName);
				}
				orderPrice.put(itemName, price);
			}
			isCategory = false;
		});
	}*/

	/*public final void setInitialValues() //clear combo box and spinner after each entery
	{
		//cbx_choose_order.setModel(new DefaultComboBoxModel<>(new String[]{""}));
		cbx_choose_order.setSelectedIndex(-1);
		spin_quantity.setValue(1);
	}
*/
	/**
	 * @param args the command line arguments
	 */
	public static void main(String args[]) {
		/* Set the Nimbus look and feel */
		//<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
		/* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
		 */
		try {
			for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
				if ("Nimbus".equals(info.getName())) {
					javax.swing.UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		} catch (ClassNotFoundException ex) {
			java.util.logging.Logger.getLogger(WaiterOrderForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (InstantiationException ex) {
			java.util.logging.Logger.getLogger(WaiterOrderForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (IllegalAccessException ex) {
			java.util.logging.Logger.getLogger(WaiterOrderForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (javax.swing.UnsupportedLookAndFeelException ex) {
			java.util.logging.Logger.getLogger(WaiterOrderForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		}
		//</editor-fold>
		//</editor-fold>
		//</editor-fold>
		//</editor-fold>

		/* Create and display the form */
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				new WaiterOrderForm().setVisible(true);
			}
		});
	}

        // Variables declaration - do not modify//GEN-BEGIN:variables
        // End of variables declaration//GEN-END:variables
}
